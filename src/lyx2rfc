#!/bin/bash

# Copyright (c) 2012, Cryptonector, LLC.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

## Useful for debugging invocations from LyX
#exec > /tmp/l2r.log 2>&1
#set -x

set -e
set -o noglob

PROG=${0##*/}
if [[ "$0" = */* ]]; then
    ORIGIN=${0%/*}
    if [[ "$ORIGIN" != /* ]]; then
        ORIGIN=${PWD}/$ORIGIN
    fi
else
    ORIGIN=${PWD}
fi

if [[ -d "$ORIGIN/../share/lyx2rfc" ]]; then
    DATADIR=$ORIGIN/../share/lyx2rfc
elif [[ -f "$ORIGIN/../data/rfc2629.dtd" ]]; then
    DATADIR=$ORIGIN/../data
elif [[ -f "$ORIGIN/rfc2629.dtd" ]]; then
    DATADIR=$ORIGIN
elif [[ "$ORIGIN" != $PWD && -f "$PWD/rfc2629.dtd" ]]; then
    DATADIR=$PWD
else
    printf "Error: can't find lyx2rfc data directory; check installation\n" 1>&2
    exit 1
fi

XSL=$DATADIR/lyxhtml2xml2rfc.xsl

# Various DTDs
LYX_XHTML_DTD=http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd
XHTML_DTD=http://www.w3.org/TR/2001/REC-MathML2-20010221/dtd/xhtml-math11-f.dtd

if [[ -f $DATADIR/xhtml-math11-f.dtd ]]; then
    LOCAL_XHTML_DTD=$DATADIR/xhtml-math11-f.dtd
else
    LOCAL_XHTML_DTD=$PWD/xhtml-math11-f.dtd
fi

function usage {
    cat <<EOF
Usage: $PROG lyx_file [out_file]
    Supported output file types:
        .xhtml (LyXHTML)
        .xml (xml2rfc source)
        .txt (xml2rfc text output)
        .unpg (xml2rfc unpaginated text output)
        .html (using the Greenbytes XSL)

    By default all outputs are generated.
EOF
    exit 1
}

function check_already_done {
    typeset -u ftype

    ftype=${out##*.}
    if [[ "$requested" = "$out" && -f "$out" && "$out" -nt "$input" ]];
    then
        printf "$ftype already up to date\n"
        exit 0
    fi
}

function requested {
    [[ -z "$requested" || "$requested" = "$1" ]]
    return $?
}

# Very, *very* lame command-line parsing; should use getopts, as we
# might want options for, e.g., not leaving behind intermediate files
# like .xhtml or .xml.
#
# The first argument must be a LyX document filename.  If it doesn't end
# in .lyx we'll tack on the .lyx extension.  Or it could be a .xml file.
#
# The second argument (optional) must be an output filename.  The
# extension must be one of txt, unpg, html, or xml.
(($# > 0)) || usage
(($# < 3)) || usage
input=$1
[[ "$input" != *.lyx && "$input" != *.* ]] && input=${input}.lyx
[[ "$input" != *.@(lyx|xhtml|xml) ]] && usage
xhtml=${1%%.lyx}.xhtml

[[ -n "$2" && "$2" != *.@(xhtml|xml|txt|unpg|html) ]] && usage
requested=$2

if [[ -n "$requested" && "${requested}" = */* ]]; then
    target_dir=${requested%/*}
elif [[ "${input}" = */* ]]; then
    target_dir=${input%/*}
else
    target_dir=.
fi


# Normalize $1 if no $2
out=${2:-${input%.lyx}.txt}
[[ "$out" != *.* ]] && out=${out}.txt

#
txt=${2:-${out%.*}.txt}
unpg=${2:-${out%.*}.unpg}
xml=${out%.*}.xml
html=${out%.*}.html

# Get and cache a local copy of the XHTML DTD:
if [[ ! -f "$LOCAL_XHTML_DTD" ]]; then
    wget -O $LOCAL_XHTML_DTD $XHTML_DTD
fi

# Export LyX document as XHTML:
if [[ "$input" = *.lyx ]]; then
    check_already_done
    printf "Exporting LyX document as XHTML...\n"
    lyx -e xhtml "$input"

    # Fix DTD URL in XHTML to refer to the local copy (LyX uses a dead URL):
    sed --in-place -e "s,${LYX_XHTML_DTD},file://${LOCAL_XHTML_DTD}," "$xhtml"
    [[ "$requested" = "$xhtml" ]] && exit 0
fi


# Apply the lyx2rfc XSTL stylesheet and pretty-print result:
# (the old xml2rfc tool doesn't grok xmlns attributes; remove them)
if [[ "$input" = *.@(lyx|xhtml) ]]; then
    check_already_done
    printf "Applying XSLT stylesheet for XHTML->rfc2629.dtd conversion...\n"
    # java net/sf/saxon/Transform "$xhtml" $XSL |
    saxonb-xslt -ext:on -xsl:$XSL -s:"$xhtml" |
        sed -e 's,xmlns="xml2rfc",,' -e 's/></>\n</g' |
        xmllint --format - > "$xml"
fi

## Set the correct DTD URL, just so we don't have a local path left here
#sed --in-place -e "s,file://${LOCAL_XHTML_DTD},${XHTML_DTD}," "$xml"
[[ "$requested" = "$xml" ]] && exit 0

# Run xml2rfc to do the final conversion if desired:
if requested "$txt"; then
    printf "Applying xml2rfc for final paginated formatting...\n"
    DISPLAY= xml2rfc "$xml" "$txt"
fi

if requested "$unpg"; then
    printf "Applying xml2rfc for final unpaginated formatting...\n"
    DISPLAY= xml2rfc "$xml" "$unpg"
fi

# Use Greenbytes' XSLT to produce HTML
temp_files=false
if requested "$html"; then
    printf "Applying the Julian Reschke's (Greenbytes) XSLT to produce HTML...\n"
    # Ugh: XSLT requires dependent files to be collocated with input file
    if [[ ! -f $target_dir/rfc2629.dtd ]]; then
	temp_files=true
	cp $DATADIR/{rfc2629.dtd,rfc2629-xhtml.ent,rfc2629-other.ent} $target_dir
    fi

    saxonb-xslt -s:"$xml" -xsl:${DATADIR}/rfc2629.xslt > "$html"

    $temp_files && rm -f $target_dir/{rfc2629.dtd,rfc2629-xhtml.ent,rfc2629-other.ent}
fi
